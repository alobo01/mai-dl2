#!/usr/bin/env bash

set -e

if [ -z "$1" ]; then
  echo "Usage: $0 <RUN_ID_OR_PATH_TO_RUN_DIR>"
  echo "Example: $0 2025-05-16_10-12-00"
  echo "    or $0 outputs/runs/2025-05-16_10-12-00"
  exit 1
fi

RUN_PATH=$1
RUN_ID=$(basename "${RUN_PATH}")

export PYTHONPATH=$PYTHONPATH:$(pwd)

echo "Generating plots for run: ${RUN_ID}"

# Path to the scores.pkl file generated by eval.py
# eval.py saves into <RUN_PATH>/eval_outputs/scores_<RUN_ID or current>.pkl
SCORES_PKL="${RUN_PATH}/eval_outputs/scores_${RUN_ID}.pkl"
# If eval.py was run with default "current" name:
if [ ! -f "${SCORES_PKL}" ]; then
    SCORES_PKL="${RUN_PATH}/eval_outputs/scores_current.pkl"
fi

if [ ! -f "${SCORES_PKL}" ]; then
    echo "Error: Scores file ${SCORES_PKL} not found."
    echo "Make sure eval.py has been run for ${RUN_ID}."
    exit 1
fi

# Output directory for plots
PLOTS_DIR="${RUN_PATH}/plots" # Store plots within the original run's folder
mkdir -p "${PLOTS_DIR}"

# Need num_known_classes for confusion matrix.
# This should come from the config of the run.
# Load it from the training config yaml.
CONFIG_YAML="${RUN_PATH}/config_resolved.yaml"
if [ ! -f "${CONFIG_YAML}" ]; then
    CONFIG_YAML="${RUN_PATH}/.hydra/config.yaml" # Fallback for older hydra
fi

if [ ! -f "${CONFIG_YAML}" ]; then
    echo "Error: Config YAML for run ${RUN_ID} not found at ${CONFIG_YAML} or ${RUN_PATH}/.hydra/config.yaml"
    exit 1
fi

# Use yq or similar to parse YAML, or a small python script.
# Simpler: Assume a default or require it as an argument for the script.
# For CIFAR10 example with 8 known classes:
NUM_KNOWN_CLASSES=$(python -c "from omegaconf import OmegaConf; cfg = OmegaConf.load('${CONFIG_YAML}'); print(cfg.dataset.num_known_classes)")
echo "Number of known classes from config: ${NUM_KNOWN_CLASSES}"


echo "Generating OSCR curve..."
python -m src.visualize.oscr_curve \
    --scores "${SCORES_PKL}" \
    --out    "${PLOTS_DIR}/${RUN_ID}_oscr.png"

echo "Generating ROC curve..."
python -m src.visualize.roc_curve \
    --scores "${SCORES_PKL}" \
    --out    "${PLOTS_DIR}/${RUN_ID}_roc.png"

# t-SNE plot (check if feats are in scores.pkl)
# This depends on cfg.eval.save_features_for_tsne=True during eval
echo "Generating t-SNE plot (if features available)..."
python -m src.visualize.tsne \
    --scores "${SCORES_PKL}" \
    --out    "${PLOTS_DIR}/${RUN_ID}_tsne.png"

echo "Generating confusion matrix..."
python -m src.visualize.confusion_matrix \
    --scores "${SCORES_PKL}" \
    --num_known_classes "${NUM_KNOWN_CLASSES}" \
    --out    "${PLOTS_DIR}/${RUN_ID}_cm.png"

echo "Plots generated in ${PLOTS_DIR}"